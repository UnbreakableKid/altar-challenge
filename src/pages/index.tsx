import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { signIn, signOut, useSession } from "next-auth/react";
import { Box, Button, Center, HStack, Icon, Input, SimpleGrid, Stack, Text } from "@chakra-ui/react";
import { VscCircleFilled } from "react-icons/vsc";
import { useState } from "react";
import { BsClock } from "react-icons/bs";

const Home: NextPage = () => {
  const [inputValue, setInputValue] = useState('');
  const [inputState, setInputState] = useState(true);
  const [generateGrid, setGenerateGrid] = useState<"generate" | 'pause' | 'disabled'>('disabled');
  const { data: Grid } = trpc.grid.generate.useQuery(undefined, {
    refetchInterval: 2000, enabled: generateGrid === 'generate', cacheTime: 0
  });
  const { data: Code, refetch } = trpc.code.generate.useQuery({ character: inputValue, grid: Grid }, {
    cacheTime: 0,
    enabled: !!Grid && generateGrid === 'generate', onSuccess: () => {
      if (inputState && inputValue !== '') {
        setInputState(false);
        //wait 4 seconds before allowing the user to generate another code
        setTimeout(() => {
          setInputState(true);

        }, 4000);
      }
    }
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setInputValue(value);
    refetch();
  }

  return (
    <>
      <Head>
        <title>Grid</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Stack>
        <HStack justifyContent={'space-between'} p={5}>
          <Stack spacing={1}>
            <Text mb='8px'>Character</Text>
            <Input
              placeholder='Here is a sample placeholder'
              size='sm'
              borderRadius={'50'}
              value={inputValue}
              onChange={(e) => handleInputChange(e)}
              isDisabled={!inputState}
            />
          </Stack>
          <Icon as={BsClock} w={8} h={8} />
          {generateGrid === 'generate' &&
            <Button onClick={() => setGenerateGrid('pause')} w={185}>Pause Generating</Button>
          }
          {generateGrid === 'pause' &&
            <Button onClick={() => setGenerateGrid('generate')} w={185}>Resume Generating</Button>
          }
          {generateGrid === 'disabled' &&
            <Button onClick={() => setGenerateGrid('generate')} w={185}>Generate Grid</Button>
          }
        </HStack>
        {generateGrid !== 'disabled' &&
          <SimpleGrid columns={10} border={'1px'} w={'full'} h={'fit-content'}>
            {Grid?.split('').map((char, i) => (
              <Box bg={"white.100"} border={"1px"} boxShadow='sm' borderColor={"gray.500"} p={15} key={i} textAlign={'center'} boxSize={'full'} >{char}</Box>
            ))}
          </SimpleGrid>
        }
        {generateGrid !== 'disabled' &&
          <Center>
            <Stack >
              <Center>
                <Stack>

                  <HStack spacing={1} p={5}>
                    {generateGrid === 'generate' ?
                      <>
                        <Icon as={VscCircleFilled} color="red" />
                        <Text fontWeight={'bold'}>Live</Text>
                      </>
                      :
                      <>
                        <Icon as={VscCircleFilled} color="green" />
                        <Text fontWeight={'bold'}>Paused</Text>
                      </>
                    }
                  </HStack>
                  <Box boxShadow={'lg'} rounded='3xl' w={150} h='full' p={5}>
                    <Text>Your code: {Code?.value}</Text>
                    {/* if dev environment print first char and second char also */}
                    {process.env.NODE_ENV === 'development' && (
                      <>
                        <Text>First char: {Code?.firstChar}</Text>
                        <Text>Second char: {Code?.secondChar}</Text>
                        <Text>Seconds: {Code?.seconds}</Text>
                        <Text>FirstVal {Code?.firstVal}</Text>
                        <Text>Second: {Code?.lastVal}</Text>
                      </>
                    )}
                  </Box>
                </Stack>
              </Center>
              {process.env.NODE_ENV === 'development' && inputValue !== '' && (
                <Box p={5}>
                  <SimpleGrid columns={10} border={'1px'} w={'fit-content'} h={'fit-content'} mb={-10}>
                    {Code?.grid?.split('').map((char, i) => (
                      <Box bg={"white.100"} border={"1px"} boxShadow='sm' borderColor={"gray.500"} p={15} key={i} textAlign={'center'} boxSize={'full'} >{char}</Box>
                    ))}
                  </SimpleGrid>
                </Box>
              )}
            </Stack>
          </Center>
        }
      </Stack>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery();

  const { data: sessionData } = useSession();

  return (
    <div>
      {sessionData && <p>Logged in as {sessionData?.user?.name}</p>}
      <button
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};